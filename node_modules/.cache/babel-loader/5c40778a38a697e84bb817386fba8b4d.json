{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport locationSearchApi from \"../../api/locationSearch\";\nimport { initialState } from \"../initialState\";\nexport const searchLocation = createAsyncThunk(\"locationSearch/searchLocation\", async searchValue => {\n  const response = await locationSearchApi.searchLocation(searchValue); // The value we return becomes the `fulfilled` action payload\n\n  return response.data;\n});\nexport const locationSearchSlice = createSlice({\n  name: \"locationSearch\",\n  initialState: initialState.locationSearch,\n  reducers: {\n    setSearchText: (state, action) => {\n      state.searchText = action.payload;\n    },\n    setSearchValue: (state, action) => {\n      state.value = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(searchLocation.pending, state => {\n      state.loading = true;\n    }).addCase(searchLocation.fulfilled, (state, action) => {\n      state.loading = false;\n      state.options = action.payload.filter(({\n        lat,\n        lon\n      }, i, arr) => arr.findIndex(d => d.lat === lat) === i && arr.findIndex(d => d.lon === lon) === i);\n    });\n  }\n});\nexport const {\n  setSearchText\n} = locationSearchSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const selectOptions = state => state.locationSearch.options;\nexport const selectIsLoading = state => state.locationSearch.loading;\nexport const selectSearchText = state => state.locationSearch.searchText;\nexport const selectSearchValue = state => state.locationSearch.value; // We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n// export const incrementIfOdd = (amount) => (dispatch, getState) => {\n//   const currentValue = selectCount(getState());\n//   if (currentValue % 2 === 1) {\n//     dispatch(incrementByAmount(amount));\n//   }\n// };\n\nexport default locationSearchSlice.reducer;","map":{"version":3,"sources":["/home/davit/Documents/work/weather/src/redux/locationSearch/locationSearchSlice.js"],"names":["createAsyncThunk","createSlice","locationSearchApi","initialState","searchLocation","searchValue","response","data","locationSearchSlice","name","locationSearch","reducers","setSearchText","state","action","searchText","payload","setSearchValue","value","extraReducers","builder","addCase","pending","loading","fulfilled","options","filter","lat","lon","i","arr","findIndex","d","actions","selectOptions","selectIsLoading","selectSearchText","selectSearchValue","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,iBAAP,MAA8B,0BAA9B;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAEA,OAAO,MAAMC,cAAc,GAAGJ,gBAAgB,CAC5C,+BAD4C,EAE5C,MAAOK,WAAP,IAAuB;AACrB,QAAMC,QAAQ,GAAG,MAAMJ,iBAAiB,CAACE,cAAlB,CAAiCC,WAAjC,CAAvB,CADqB,CAErB;;AACA,SAAOC,QAAQ,CAACC,IAAhB;AACD,CAN2C,CAAvC;AASP,OAAO,MAAMC,mBAAmB,GAAGP,WAAW,CAAC;AAC7CQ,EAAAA,IAAI,EAAE,gBADuC;AAE7CN,EAAAA,YAAY,EAAEA,YAAY,CAACO,cAFkB;AAG7CC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChCD,MAAAA,KAAK,CAACE,UAAN,GAAmBD,MAAM,CAACE,OAA1B;AACD,KAHO;AAIRC,IAAAA,cAAc,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACjCD,MAAAA,KAAK,CAACK,KAAN,GAAcJ,MAAM,CAACE,OAArB;AACD;AANO,GAHmC;AAW7CG,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWjB,cAAc,CAACkB,OAD1B,EACoCT,KAAD,IAAW;AAC1CA,MAAAA,KAAK,CAACU,OAAN,GAAgB,IAAhB;AACD,KAHH,EAIGF,OAJH,CAIWjB,cAAc,CAACoB,SAJ1B,EAIqC,CAACX,KAAD,EAAQC,MAAR,KAAmB;AACpDD,MAAAA,KAAK,CAACU,OAAN,GAAgB,KAAhB;AACAV,MAAAA,KAAK,CAACY,OAAN,GAAgBX,MAAM,CAACE,OAAP,CAAeU,MAAf,CACd,CAAC;AAAEC,QAAAA,GAAF;AAAOC,QAAAA;AAAP,OAAD,EAAeC,CAAf,EAAkBC,GAAlB,KACEA,GAAG,CAACC,SAAJ,CAAeC,CAAD,IAAOA,CAAC,CAACL,GAAF,KAAUA,GAA/B,MAAwCE,CAAxC,IACAC,GAAG,CAACC,SAAJ,CAAeC,CAAD,IAAOA,CAAC,CAACJ,GAAF,KAAUA,GAA/B,MAAwCC,CAH5B,CAAhB;AAKD,KAXH;AAYD;AAxB4C,CAAD,CAAvC;AA2BP,OAAO,MAAM;AAAEjB,EAAAA;AAAF,IAAoBJ,mBAAmB,CAACyB,OAA9C,C,CAEP;AACA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAIrB,KAAD,IAAWA,KAAK,CAACH,cAAN,CAAqBe,OAAtD;AACP,OAAO,MAAMU,eAAe,GAAItB,KAAD,IAAWA,KAAK,CAACH,cAAN,CAAqBa,OAAxD;AACP,OAAO,MAAMa,gBAAgB,GAAIvB,KAAD,IAAWA,KAAK,CAACH,cAAN,CAAqBK,UAAzD;AACP,OAAO,MAAMsB,iBAAiB,GAAIxB,KAAD,IAAWA,KAAK,CAACH,cAAN,CAAqBQ,KAA1D,C,CAEP;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeV,mBAAmB,CAAC8B,OAAnC","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport locationSearchApi from \"../../api/locationSearch\";\nimport { initialState } from \"../initialState\";\n\nexport const searchLocation = createAsyncThunk(\n  \"locationSearch/searchLocation\",\n  async (searchValue) => {\n    const response = await locationSearchApi.searchLocation(searchValue);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const locationSearchSlice = createSlice({\n  name: \"locationSearch\",\n  initialState: initialState.locationSearch,\n  reducers: {\n    setSearchText: (state, action) => {\n      state.searchText = action.payload;\n    },\n    setSearchValue: (state, action) => {\n      state.value = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(searchLocation.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(searchLocation.fulfilled, (state, action) => {\n        state.loading = false;\n        state.options = action.payload.filter(\n          ({ lat, lon }, i, arr) =>\n            arr.findIndex((d) => d.lat === lat) === i &&\n            arr.findIndex((d) => d.lon === lon) === i\n        );\n      });\n  },\n});\n\nexport const { setSearchText } = locationSearchSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectOptions = (state) => state.locationSearch.options;\nexport const selectIsLoading = (state) => state.locationSearch.loading;\nexport const selectSearchText = (state) => state.locationSearch.searchText;\nexport const selectSearchValue = (state) => state.locationSearch.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\n// export const incrementIfOdd = (amount) => (dispatch, getState) => {\n//   const currentValue = selectCount(getState());\n//   if (currentValue % 2 === 1) {\n//     dispatch(incrementByAmount(amount));\n//   }\n// };\n\nexport default locationSearchSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}