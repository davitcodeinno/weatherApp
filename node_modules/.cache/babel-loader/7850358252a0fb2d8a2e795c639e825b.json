{"ast":null,"code":"var _jsxFileName = \"/home/davit/Documents/work/weather/src/components/main/Today.js\",\n    _s = $RefreshSig$();\n\nimport { CardContent } from \"@mui/material\";\nimport React, { useEffect, useMemo } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport { selectSearchValue } from \"../../redux/locationSearch/locationSearchSlice\";\nimport { getWeatherData, selectWeatherForecastData } from \"../../redux/weather/weatherSlice\";\nimport WeatherCard from \"../shared/WeatherCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Today = () => {\n  _s();\n\n  const searchValue = useSelector(selectSearchValue);\n  const {\n    forecastday\n  } = useSelector(selectWeatherForecastData) || [];\n  const hours = useMemo(() => (forecastday.find(d => new Date(d.date).getDate() === new Date().getDate()) || {}).hour || [], [forecastday]);\n  console.log(hours);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (searchValue) {\n      dispatch(getWeatherData(searchValue));\n    }\n  }, [searchValue, dispatch]);\n  return /*#__PURE__*/_jsxDEV(WeatherCard, {\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: {\n          xs: 2,\n          md: 3\n        },\n        columns: {\n          xs: 4,\n          sm: 8,\n          md: 12\n        },\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: hours.map(h => /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 2,\n            sm: 4,\n            md: 4,\n            children: [/*#__PURE__*/_jsxDEV(LabelAndValue, {\n              label: text,\n              value: /*#__PURE__*/_jsxDEV(Avatar, {\n                sx: {\n                  width: 64,\n                  height: 64\n                },\n                variant: \"square\",\n                src: `https:${icon}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(LabelAndValue, {\n              label: label,\n              additionalValue: additionalValue,\n              value: valueRenderer ? valueRenderer(weatherData[key]) : weatherData[key]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 17\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this))\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Today, \"oazyY3juX0R3C4ZBDhepSM/EIv8=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = Today;\nexport default Today;\n\nvar _c;\n\n$RefreshReg$(_c, \"Today\");","map":{"version":3,"sources":["/home/davit/Documents/work/weather/src/components/main/Today.js"],"names":["CardContent","React","useEffect","useMemo","useDispatch","useSelector","selectSearchValue","getWeatherData","selectWeatherForecastData","WeatherCard","Today","searchValue","forecastday","hours","find","d","Date","date","getDate","hour","console","log","dispatch","xs","md","sm","map","h","text","width","height","icon","label","additionalValue","valueRenderer","weatherData","key"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,eAA5B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,QAA0C,OAA1C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,iBAAT,QAAkC,gDAAlC;AACA,SACEC,cADF,EAEEC,yBAFF,QAGO,kCAHP;AAIA,OAAOC,WAAP,MAAwB,uBAAxB;;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAMC,WAAW,GAAGN,WAAW,CAACC,iBAAD,CAA/B;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAkBP,WAAW,CAACG,yBAAD,CAAX,IAA0C,EAAlE;AACA,QAAMK,KAAK,GAAGV,OAAO,CACnB,MACE,CACES,WAAW,CAACE,IAAZ,CACGC,CAAD,IAAO,IAAIC,IAAJ,CAASD,CAAC,CAACE,IAAX,EAAiBC,OAAjB,OAA+B,IAAIF,IAAJ,GAAWE,OAAX,EADxC,KAEK,EAHP,EAIEC,IAJF,IAIU,EANO,EAOnB,CAACP,WAAD,CAPmB,CAArB;AASAQ,EAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AACA,QAAMS,QAAQ,GAAGlB,WAAW,EAA5B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,WAAJ,EAAiB;AACfW,MAAAA,QAAQ,CAACf,cAAc,CAACI,WAAD,CAAf,CAAR;AACD;AACF,GAJQ,EAIN,CAACA,WAAD,EAAcW,QAAd,CAJM,CAAT;AAMA,sBACE,QAAC,WAAD;AAAA,2BACE,QAAC,WAAD;AAAA,6BACE,QAAC,IAAD;AACE,QAAA,SAAS,MADX;AAEE,QAAA,OAAO,EAAE;AAAEC,UAAAA,EAAE,EAAE,CAAN;AAASC,UAAAA,EAAE,EAAE;AAAb,SAFX;AAGE,QAAA,OAAO,EAAE;AAAED,UAAAA,EAAE,EAAE,CAAN;AAASE,UAAAA,EAAE,EAAE,CAAb;AAAgBD,UAAAA,EAAE,EAAE;AAApB,SAHX;AAAA,+BAKE;AAAA,oBACGX,KAAK,CAACa,GAAN,CAAWC,CAAD,iBACT,QAAC,IAAD;AAAM,YAAA,IAAI,MAAV;AAAW,YAAA,EAAE,EAAE,CAAf;AAAkB,YAAA,EAAE,EAAE,CAAtB;AAAyB,YAAA,EAAE,EAAE,CAA7B;AAAA,oCACE,QAAC,aAAD;AACE,cAAA,KAAK,EAAEC,IADT;AAEE,cAAA,KAAK,eACH,QAAC,MAAD;AACE,gBAAA,EAAE,EAAE;AAAEC,kBAAAA,KAAK,EAAE,EAAT;AAAaC,kBAAAA,MAAM,EAAE;AAArB,iBADN;AAEE,gBAAA,OAAO,EAAC,QAFV;AAGE,gBAAA,GAAG,EAAG,SAAQC,IAAK;AAHrB;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA,oBADF,eAWE,QAAC,aAAD;AACE,cAAA,KAAK,EAAEC,KADT;AAEE,cAAA,eAAe,EAAEC,eAFnB;AAGE,cAAA,KAAK,EACHC,aAAa,GACTA,aAAa,CAACC,WAAW,CAACC,GAAD,CAAZ,CADJ,GAETD,WAAW,CAACC,GAAD;AANnB;AAAA;AAAA;AAAA;AAAA,oBAXF;AAAA,aAAqCA,GAArC;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AALF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAqCD,CA1DD;;GAAM1B,K;UACgBL,W,EACIA,W,EAWPD,W;;;KAbbM,K;AA4DN,eAAeA,KAAf","sourcesContent":["import { CardContent } from \"@mui/material\";\nimport React, { useEffect, useMemo } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport { selectSearchValue } from \"../../redux/locationSearch/locationSearchSlice\";\nimport {\n  getWeatherData,\n  selectWeatherForecastData,\n} from \"../../redux/weather/weatherSlice\";\nimport WeatherCard from \"../shared/WeatherCard\";\n\nconst Today = () => {\n  const searchValue = useSelector(selectSearchValue);\n  const { forecastday } = useSelector(selectWeatherForecastData) || [];\n  const hours = useMemo(\n    () =>\n      (\n        forecastday.find(\n          (d) => new Date(d.date).getDate() === new Date().getDate()\n        ) || {}\n      ).hour || [],\n    [forecastday]\n  );\n  console.log(hours);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (searchValue) {\n      dispatch(getWeatherData(searchValue));\n    }\n  }, [searchValue, dispatch]);\n\n  return (\n    <WeatherCard>\n      <CardContent>\n        <Grid\n          container\n          spacing={{ xs: 2, md: 3 }}\n          columns={{ xs: 4, sm: 8, md: 12 }}\n        >\n          <>\n            {hours.map((h) => (\n              <Grid item xs={2} sm={4} md={4} key={key}>\n                <LabelAndValue\n                  label={text}\n                  value={\n                    <Avatar\n                      sx={{ width: 64, height: 64 }}\n                      variant=\"square\"\n                      src={`https:${icon}`}\n                    />\n                  }\n                />\n                <LabelAndValue\n                  label={label}\n                  additionalValue={additionalValue}\n                  value={\n                    valueRenderer\n                      ? valueRenderer(weatherData[key])\n                      : weatherData[key]\n                  }\n                />\n              </Grid>\n            ))}\n          </>\n        </Grid>\n      </CardContent>\n    </WeatherCard>\n  );\n};\n\nexport default Today;\n"]},"metadata":{},"sourceType":"module"}