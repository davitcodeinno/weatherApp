{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport weatherApi from \"../../api/weather\";\nconst initialState = {\n  searchValue: \"\",\n  options: [],\n  loading: false\n};\nexport const searchLocation = createAsyncThunk(\"weather/searchLocation\", async searchValue => {\n  const response = await weatherApi.searchLocation(searchValue); // The value we return becomes the `fulfilled` action payload\n\n  return response.data;\n});\nexport const weatherSlice = createSlice({\n  name: \"weather\",\n  initialState,\n  reducers: {\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(searchLocation.pending, state => {\n      state.loading = true;\n    }).addCase(searchLocation.fulfilled, (state, action) => {\n      state.loading = false;\n      state.options = action.payload;\n    });\n  }\n});\nexport const {\n  incrementByAmount\n} = weatherSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const selectOptions = state => state.weather.options; // We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n// export const incrementIfOdd = (amount) => (dispatch, getState) => {\n//   const currentValue = selectCount(getState());\n//   if (currentValue % 2 === 1) {\n//     dispatch(incrementByAmount(amount));\n//   }\n// };\n\nexport default weatherSlice.reducer;","map":{"version":3,"sources":["/home/davit/Documents/work/weather/src/redux/weather/weatherSlice.js"],"names":["createAsyncThunk","createSlice","weatherApi","initialState","searchValue","options","loading","searchLocation","response","data","weatherSlice","name","reducers","incrementByAmount","state","action","value","payload","extraReducers","builder","addCase","pending","fulfilled","actions","selectOptions","weather","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE,EADM;AAEnBC,EAAAA,OAAO,EAAE,EAFU;AAGnBC,EAAAA,OAAO,EAAE;AAHU,CAArB;AAMA,OAAO,MAAMC,cAAc,GAAGP,gBAAgB,CAC5C,wBAD4C,EAE5C,MAAOI,WAAP,IAAuB;AACrB,QAAMI,QAAQ,GAAG,MAAMN,UAAU,CAACK,cAAX,CAA0BH,WAA1B,CAAvB,CADqB,CAErB;;AACA,SAAOI,QAAQ,CAACC,IAAhB;AACD,CAN2C,CAAvC;AASP,OAAO,MAAMC,YAAY,GAAGT,WAAW,CAAC;AACtCU,EAAAA,IAAI,EAAE,SADgC;AAEtCR,EAAAA,YAFsC;AAGtCS,EAAAA,QAAQ,EAAE;AACRC,IAAAA,iBAAiB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpCD,MAAAA,KAAK,CAACE,KAAN,IAAeD,MAAM,CAACE,OAAtB;AACD;AAHO,GAH4B;AAQtCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWb,cAAc,CAACc,OAD1B,EACoCP,KAAD,IAAW;AAC1CA,MAAAA,KAAK,CAACR,OAAN,GAAgB,IAAhB;AACD,KAHH,EAIGc,OAJH,CAIWb,cAAc,CAACe,SAJ1B,EAIqC,CAACR,KAAD,EAAQC,MAAR,KAAmB;AACpDD,MAAAA,KAAK,CAACR,OAAN,GAAgB,KAAhB;AACAQ,MAAAA,KAAK,CAACT,OAAN,GAAgBU,MAAM,CAACE,OAAvB;AACD,KAPH;AAQD;AAjBqC,CAAD,CAAhC;AAoBP,OAAO,MAAM;AAAEJ,EAAAA;AAAF,IAAwBH,YAAY,CAACa,OAA3C,C,CAEP;AACA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAIV,KAAD,IAAWA,KAAK,CAACW,OAAN,CAAcpB,OAA/C,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeK,YAAY,CAACgB,OAA5B","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport weatherApi from \"../../api/weather\";\n\nconst initialState = {\n  searchValue: \"\",\n  options: [],\n  loading: false,\n};\n\nexport const searchLocation = createAsyncThunk(\n  \"weather/searchLocation\",\n  async (searchValue) => {\n    const response = await weatherApi.searchLocation(searchValue);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const weatherSlice = createSlice({\n  name: \"weather\",\n  initialState,\n  reducers: {\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(searchLocation.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(searchLocation.fulfilled, (state, action) => {\n        state.loading = false;\n        state.options = action.payload;\n      });\n  },\n});\n\nexport const { incrementByAmount } = weatherSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectOptions = (state) => state.weather.options;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n// export const incrementIfOdd = (amount) => (dispatch, getState) => {\n//   const currentValue = selectCount(getState());\n//   if (currentValue % 2 === 1) {\n//     dispatch(incrementByAmount(amount));\n//   }\n// };\n\nexport default weatherSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}