{"ast":null,"code":"var _jsxFileName = \"/home/davit/Documents/work/weather/src/components/main/Forecast.js\",\n    _s = $RefreshSig$();\n\nimport { Avatar, CardContent, Grid, Paper, Typography } from \"@mui/material\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport { selectSearchValue } from \"../../redux/locationSearch/locationSearchSlice\";\nimport { getWeatherData, selectWeatherForecastData } from \"../../redux/weather/weatherSlice\";\nimport WeatherCard from \"../shared/WeatherCard\";\nimport m from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Forecast = () => {\n  _s();\n\n  const searchValue = useSelector(selectSearchValue);\n  const {\n    forecastday\n  } = useSelector(selectWeatherForecastData) || [];\n  console.log(forecastday);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (searchValue === null || searchValue === void 0 ? void 0 : searchValue.name) {\n      dispatch(getWeatherData(searchValue));\n    }\n  }, [searchValue, dispatch]);\n  return /*#__PURE__*/_jsxDEV(WeatherCard, {\n    maxWidth: 920,\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: {\n          xs: 1\n        },\n        columns: {\n          xs: 12\n        },\n        children: forecastday.map(d => {\n          const {\n            day: {\n              condition: {\n                text,\n                icon\n              } = {}\n            } = {},\n            day,\n            date\n          } = d;\n          return /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4,\n            children: /*#__PURE__*/_jsxDEV(Paper, {\n              sx: {\n                pl: 1,\n                pt: 1,\n                height: \"calc(100% - 8px)\"\n              },\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                item: true,\n                spacing: {\n                  xs: 0\n                },\n                columns: {\n                  xs: 2\n                },\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 1,\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body1\",\n                    children: m(date).format(\"dddd\")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 41,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body1\",\n                    children: m(date).format(\"dddd\")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 44,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Avatar, {\n                    sx: {\n                      width: 32,\n                      height: 32\n                    },\n                    variant: \"square\",\n                    src: `https:${icon}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 47,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    children: text\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 52,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 40,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 1,\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body1\",\n                    children: new Date(date).toLocaleDateString()\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 56,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Avatar, {\n                    sx: {\n                      width: 32,\n                      height: 32\n                    },\n                    variant: \"square\",\n                    src: `https:${icon}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 59,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    children: text\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 64,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 55,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 17\n            }, this)\n          }, date, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Forecast, \"ch+kwyG1a9AIaELSTZ7GiQyIb9Q=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/home/davit/Documents/work/weather/src/components/main/Forecast.js"],"names":["Avatar","CardContent","Grid","Paper","Typography","React","useEffect","useDispatch","useSelector","selectSearchValue","getWeatherData","selectWeatherForecastData","WeatherCard","m","Forecast","searchValue","forecastday","console","log","dispatch","name","xs","map","d","day","condition","text","icon","date","pl","pt","height","format","width","Date","toLocaleDateString"],"mappings":"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","sourcesContent":["import { Avatar, CardContent, Grid, Paper, Typography } from \"@mui/material\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport { selectSearchValue } from \"../../redux/locationSearch/locationSearchSlice\";\nimport {\n  getWeatherData,\n  selectWeatherForecastData,\n} from \"../../redux/weather/weatherSlice\";\nimport WeatherCard from \"../shared/WeatherCard\";\nimport m from \"moment\";\n\nconst Forecast = () => {\n  const searchValue = useSelector(selectSearchValue);\n  const { forecastday } = useSelector(selectWeatherForecastData) || [];\n\n  console.log(forecastday);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (searchValue?.name) {\n      dispatch(getWeatherData(searchValue));\n    }\n  }, [searchValue, dispatch]);\n\n  return (\n    <WeatherCard maxWidth={920}>\n      <CardContent>\n        <Grid container spacing={{ xs: 1 }} columns={{ xs: 12 }}>\n          {forecastday.map((d) => {\n            const {\n              day: { condition: { text, icon } = {} } = {},\n              day,\n              date,\n            } = d;\n            return (\n              <Grid item xs={4} key={date}>\n                <Paper sx={{ pl: 1, pt: 1, height: \"calc(100% - 8px)\" }}>\n                  <Grid container item spacing={{ xs: 0 }} columns={{ xs: 2 }}>\n                    <Grid item xs={1}>\n                      <Typography variant=\"body1\">\n                        {m(date).format(\"dddd\")}\n                      </Typography>\n                      <Typography variant=\"body1\">\n                        {m(date).format(\"dddd\")}\n                      </Typography>\n                      <Avatar\n                        sx={{ width: 32, height: 32 }}\n                        variant=\"square\"\n                        src={`https:${icon}`}\n                      />\n                      <Typography variant=\"body2\">{text}</Typography>\n                      {/* <Typography variant=\"body2\">{temp_c}℃</Typography> */}\n                    </Grid>\n                    <Grid item xs={1}>\n                      <Typography variant=\"body1\">\n                        {new Date(date).toLocaleDateString()}\n                      </Typography>\n                      <Avatar\n                        sx={{ width: 32, height: 32 }}\n                        variant=\"square\"\n                        src={`https:${icon}`}\n                      />\n                      <Typography variant=\"body2\">{text}</Typography>\n                      {/* <Typography variant=\"body2\">{temp_c}℃</Typography> */}\n                    </Grid>\n                  </Grid>\n                </Paper>\n              </Grid>\n            );\n          })}\n        </Grid>\n      </CardContent>\n    </WeatherCard>\n  );\n};\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}