{"ast":null,"code":"// import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n// import weatherApi from \"../../api/weather\";\n// const initialState = {\n//   searchValue: \"\",\n//   options: [],\n//   loading: false,\n// };\n// export const searchLocation = createAsyncThunk(\n//   \"weather/searchLocation\",\n//   async (searchValue) => {\n//     const response = await weatherApi.searchLocation(searchValue);\n//     // The value we return becomes the `fulfilled` action payload\n//     return response.data;\n//   }\n// );\n// export const weatherSlice = createSlice({\n//   name: \"weather\",\n//   initialState,\n//   reducers: {\n//     incrementByAmount: (state, action) => {\n//       state.value += action.payload;\n//     },\n//   },\n//   extraReducers: (builder) => {\n//     builder\n//       .addCase(searchLocation.pending, (state) => {\n//         state.loading = true;\n//       })\n//       .addCase(searchLocation.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.options = action.payload.filter(\n//           ({ lat, lon }, i, arr) =>\n//             arr.findIndex((d) => d.lat === lat) === i &&\n//             arr.findIndex((d) => d.lon === lon) === i\n//         );\n//       });\n//   },\n// });\n// export const { incrementByAmount } = weatherSlice.actions;\n// // The function below is called a selector and allows us to select a value from\n// // the state. Selectors can also be defined inline where they're used instead of\n// // in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n// export const selectOptions = (state) => state.weather.options;\n// export const selectIsLoading = (state) => state.weather.loading;\n// // We can also write thunks by hand, which may contain both sync and async logic.\n// // Here's an example of conditionally dispatching actions based on current state.\n// // export const incrementIfOdd = (amount) => (dispatch, getState) => {\n// //   const currentValue = selectCount(getState());\n// //   if (currentValue % 2 === 1) {\n// //     dispatch(incrementByAmount(amount));\n// //   }\n// // };\n// export default weatherSlice.reducer;","map":{"version":3,"sources":["/home/davit/Documents/work/weather/src/redux/weather/weatherSlice.js"],"names":[],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n// import weatherApi from \"../../api/weather\";\n\n// const initialState = {\n//   searchValue: \"\",\n//   options: [],\n//   loading: false,\n// };\n\n// export const searchLocation = createAsyncThunk(\n//   \"weather/searchLocation\",\n//   async (searchValue) => {\n//     const response = await weatherApi.searchLocation(searchValue);\n//     // The value we return becomes the `fulfilled` action payload\n//     return response.data;\n//   }\n// );\n\n// export const weatherSlice = createSlice({\n//   name: \"weather\",\n//   initialState,\n//   reducers: {\n//     incrementByAmount: (state, action) => {\n//       state.value += action.payload;\n//     },\n//   },\n//   extraReducers: (builder) => {\n//     builder\n//       .addCase(searchLocation.pending, (state) => {\n//         state.loading = true;\n//       })\n//       .addCase(searchLocation.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.options = action.payload.filter(\n//           ({ lat, lon }, i, arr) =>\n//             arr.findIndex((d) => d.lat === lat) === i &&\n//             arr.findIndex((d) => d.lon === lon) === i\n//         );\n//       });\n//   },\n// });\n\n// export const { incrementByAmount } = weatherSlice.actions;\n\n// // The function below is called a selector and allows us to select a value from\n// // the state. Selectors can also be defined inline where they're used instead of\n// // in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n// export const selectOptions = (state) => state.weather.options;\n// export const selectIsLoading = (state) => state.weather.loading;\n\n// // We can also write thunks by hand, which may contain both sync and async logic.\n// // Here's an example of conditionally dispatching actions based on current state.\n\n// // export const incrementIfOdd = (amount) => (dispatch, getState) => {\n// //   const currentValue = selectCount(getState());\n// //   if (currentValue % 2 === 1) {\n// //     dispatch(incrementByAmount(amount));\n// //   }\n// // };\n\n// export default weatherSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}