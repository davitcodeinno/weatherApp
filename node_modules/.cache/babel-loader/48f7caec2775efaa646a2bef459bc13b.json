{"ast":null,"code":"var _jsxFileName = \"/home/davit/Documents/work/weather/src/components/main/Forecast.js\",\n    _s = $RefreshSig$();\n\nimport { CardContent, Grid } from \"@mui/material\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport { selectSearchValue } from \"../../redux/locationSearch/locationSearchSlice\";\nimport { getWeatherData, selectWeatherForecastData } from \"../../redux/weather/weatherSlice\";\nimport WeatherCard from \"../shared/WeatherCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Forecast = () => {\n  _s();\n\n  const searchValue = useSelector(selectSearchValue);\n  const {\n    forecastday\n  } = useSelector(selectWeatherForecastData) || [];\n  console.log(forecastday);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (searchValue === null || searchValue === void 0 ? void 0 : searchValue.name) {\n      dispatch(getWeatherData(\"Yerevan\"));\n    }\n  }, [searchValue, dispatch]);\n  return /*#__PURE__*/_jsxDEV(WeatherCard, {\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: {\n          xs: 1\n        },\n        children: hours.map(h => {\n          var _time$split;\n\n          const {\n            condition: {\n              text,\n              icon\n            } = {},\n            time,\n            temp_c\n          } = h;\n          return /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 2,\n            sm: 1,\n            children: /*#__PURE__*/_jsxDEV(Paper, {\n              sx: {\n                pl: 1,\n                pt: 1,\n                height: \"calc(100% - 8px)\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                children: (_time$split = time.split(\" \")) === null || _time$split === void 0 ? void 0 : _time$split[1]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 34,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Avatar, {\n                sx: {\n                  width: 32,\n                  height: 32\n                },\n                variant: \"square\",\n                src: `https:${icon}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 37,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                children: text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 42,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                children: [temp_c, \"\\u2103\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 17\n            }, this)\n          }, time, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Forecast, \"ch+kwyG1a9AIaELSTZ7GiQyIb9Q=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/home/davit/Documents/work/weather/src/components/main/Forecast.js"],"names":["CardContent","Grid","React","useEffect","useDispatch","useSelector","selectSearchValue","getWeatherData","selectWeatherForecastData","WeatherCard","Forecast","searchValue","forecastday","console","log","dispatch","name","xs","hours","map","h","condition","text","icon","time","temp_c","pl","pt","height","split","width"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,IAAtB,QAAkC,eAAlC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,iBAAT,QAAkC,gDAAlC;AACA,SACEC,cADF,EAEEC,yBAFF,QAGO,kCAHP;AAIA,OAAOC,WAAP,MAAwB,uBAAxB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAMC,WAAW,GAAGN,WAAW,CAACC,iBAAD,CAA/B;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAkBP,WAAW,CAACG,yBAAD,CAAX,IAA0C,EAAlE;AAEAK,EAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AACA,QAAMG,QAAQ,GAAGX,WAAW,EAA5B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,WAAJ,aAAIA,WAAJ,uBAAIA,WAAW,CAAEK,IAAjB,EAAuB;AACrBD,MAAAA,QAAQ,CAACR,cAAc,CAAC,SAAD,CAAf,CAAR;AACD;AACF,GAJQ,EAIN,CAACI,WAAD,EAAcI,QAAd,CAJM,CAAT;AAMA,sBACE,QAAC,WAAD;AAAA,2BACE,QAAC,WAAD;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,OAAO,EAAE;AAAEE,UAAAA,EAAE,EAAE;AAAN,SAAzB;AAAA,kBACGC,KAAK,CAACC,GAAN,CAAWC,CAAD,IAAO;AAAA;;AAChB,gBAAM;AAAEC,YAAAA,SAAS,EAAE;AAAEC,cAAAA,IAAF;AAAQC,cAAAA;AAAR,gBAAiB,EAA9B;AAAkCC,YAAAA,IAAlC;AAAwCC,YAAAA;AAAxC,cAAmDL,CAAzD;AACA,8BACE,QAAC,IAAD;AAAM,YAAA,IAAI,MAAV;AAAW,YAAA,EAAE,EAAE,CAAf;AAAkB,YAAA,EAAE,EAAE,CAAtB;AAAA,mCACE,QAAC,KAAD;AAAO,cAAA,EAAE,EAAE;AAAEM,gBAAAA,EAAE,EAAE,CAAN;AAASC,gBAAAA,EAAE,EAAE,CAAb;AAAgBC,gBAAAA,MAAM,EAAE;AAAxB,eAAX;AAAA,sCACE,QAAC,UAAD;AAAY,gBAAA,OAAO,EAAC,OAApB;AAAA,yCACGJ,IAAI,CAACK,KAAL,CAAW,GAAX,CADH,gDACG,YAAkB,CAAlB;AADH;AAAA;AAAA;AAAA;AAAA,sBADF,eAIE,QAAC,MAAD;AACE,gBAAA,EAAE,EAAE;AAAEC,kBAAAA,KAAK,EAAE,EAAT;AAAaF,kBAAAA,MAAM,EAAE;AAArB,iBADN;AAEE,gBAAA,OAAO,EAAC,QAFV;AAGE,gBAAA,GAAG,EAAG,SAAQL,IAAK;AAHrB;AAAA;AAAA;AAAA;AAAA,sBAJF,eASE,QAAC,UAAD;AAAY,gBAAA,OAAO,EAAC,OAApB;AAAA,0BAA6BD;AAA7B;AAAA;AAAA;AAAA;AAAA,sBATF,eAUE,QAAC,UAAD;AAAY,gBAAA,OAAO,EAAC,OAApB;AAAA,2BAA6BG,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,sBAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,aAA8BD,IAA9B;AAAA;AAAA;AAAA;AAAA,kBADF;AAgBD,SAlBA;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD,CAxCD;;GAAMd,Q;UACgBL,W,EACIA,W,EAGPD,W;;;KALbM,Q;AA0CN,eAAeA,QAAf","sourcesContent":["import { CardContent, Grid } from \"@mui/material\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport { selectSearchValue } from \"../../redux/locationSearch/locationSearchSlice\";\nimport {\n  getWeatherData,\n  selectWeatherForecastData,\n} from \"../../redux/weather/weatherSlice\";\nimport WeatherCard from \"../shared/WeatherCard\";\n\nconst Forecast = () => {\n  const searchValue = useSelector(selectSearchValue);\n  const { forecastday } = useSelector(selectWeatherForecastData) || [];\n\n  console.log(forecastday);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (searchValue?.name) {\n      dispatch(getWeatherData(\"Yerevan\"));\n    }\n  }, [searchValue, dispatch]);\n\n  return (\n    <WeatherCard>\n      <CardContent>\n        <Grid container spacing={{ xs: 1 }}>\n          {hours.map((h) => {\n            const { condition: { text, icon } = {}, time, temp_c } = h;\n            return (\n              <Grid item xs={2} sm={1} key={time}>\n                <Paper sx={{ pl: 1, pt: 1, height: \"calc(100% - 8px)\" }}>\n                  <Typography variant=\"body1\">\n                    {time.split(\" \")?.[1]}\n                  </Typography>\n                  <Avatar\n                    sx={{ width: 32, height: 32 }}\n                    variant=\"square\"\n                    src={`https:${icon}`}\n                  />\n                  <Typography variant=\"body2\">{text}</Typography>\n                  <Typography variant=\"body2\">{temp_c}â„ƒ</Typography>\n                </Paper>\n              </Grid>\n            );\n          })}\n        </Grid>\n      </CardContent>\n    </WeatherCard>\n  );\n};\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}