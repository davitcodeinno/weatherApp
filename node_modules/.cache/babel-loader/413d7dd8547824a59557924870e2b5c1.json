{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport weatherApi from \"../../api/weather\";\nconst initialState = {\n  searchValue: \"\",\n  options: [],\n  loading: false\n};\nexport const getWeather = createAsyncThunk(\"weather/getWeather\", async searchValue => {\n  const response = await weatherApi.getWeather(searchValue); // The value we return becomes the `fulfilled` action payload\n\n  return response.data;\n});\nexport const weatherSlice = createSlice({\n  name: \"weather\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getWeather.pending, state => {\n      state.loading = true;\n    }).addCase(getWeather.fulfilled, (state, action) => {\n      state.loading = false;\n      state.options = action.payload.filter(({\n        lat,\n        lon\n      }, i, arr) => arr.findIndex(d => d.lat === lat) === i && arr.findIndex(d => d.lon === lon) === i);\n    });\n  }\n});\nexport const {\n  incrementByAmount\n} = weatherSlice.actions;\nexport default weatherSlice.reducer;","map":{"version":3,"sources":["/home/davit/Documents/work/weather/src/redux/weather/weatherSlice.js"],"names":["createAsyncThunk","createSlice","weatherApi","initialState","searchValue","options","loading","getWeather","response","data","weatherSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","filter","lat","lon","i","arr","findIndex","d","incrementByAmount","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE,EADM;AAEnBC,EAAAA,OAAO,EAAE,EAFU;AAGnBC,EAAAA,OAAO,EAAE;AAHU,CAArB;AAMA,OAAO,MAAMC,UAAU,GAAGP,gBAAgB,CACxC,oBADwC,EAExC,MAAOI,WAAP,IAAuB;AACrB,QAAMI,QAAQ,GAAG,MAAMN,UAAU,CAACK,UAAX,CAAsBH,WAAtB,CAAvB,CADqB,CAErB;;AACA,SAAOI,QAAQ,CAACC,IAAhB;AACD,CANuC,CAAnC;AASP,OAAO,MAAMC,YAAY,GAAGT,WAAW,CAAC;AACtCU,EAAAA,IAAI,EAAE,SADgC;AAEtCR,EAAAA,YAFsC;AAGtCS,EAAAA,QAAQ,EAAE,EAH4B;AAItCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWR,UAAU,CAACS,OADtB,EACgCC,KAAD,IAAW;AACtCA,MAAAA,KAAK,CAACX,OAAN,GAAgB,IAAhB;AACD,KAHH,EAIGS,OAJH,CAIWR,UAAU,CAACW,SAJtB,EAIiC,CAACD,KAAD,EAAQE,MAAR,KAAmB;AAChDF,MAAAA,KAAK,CAACX,OAAN,GAAgB,KAAhB;AACAW,MAAAA,KAAK,CAACZ,OAAN,GAAgBc,MAAM,CAACC,OAAP,CAAeC,MAAf,CACd,CAAC;AAAEC,QAAAA,GAAF;AAAOC,QAAAA;AAAP,OAAD,EAAeC,CAAf,EAAkBC,GAAlB,KACEA,GAAG,CAACC,SAAJ,CAAeC,CAAD,IAAOA,CAAC,CAACL,GAAF,KAAUA,GAA/B,MAAwCE,CAAxC,IACAC,GAAG,CAACC,SAAJ,CAAeC,CAAD,IAAOA,CAAC,CAACJ,GAAF,KAAUA,GAA/B,MAAwCC,CAH5B,CAAhB;AAKD,KAXH;AAYD;AAjBqC,CAAD,CAAhC;AAoBP,OAAO,MAAM;AAAEI,EAAAA;AAAF,IAAwBlB,YAAY,CAACmB,OAA3C;AAEP,eAAenB,YAAY,CAACoB,OAA5B","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport weatherApi from \"../../api/weather\";\n\nconst initialState = {\n  searchValue: \"\",\n  options: [],\n  loading: false,\n};\n\nexport const getWeather = createAsyncThunk(\n  \"weather/getWeather\",\n  async (searchValue) => {\n    const response = await weatherApi.getWeather(searchValue);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const weatherSlice = createSlice({\n  name: \"weather\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(getWeather.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(getWeather.fulfilled, (state, action) => {\n        state.loading = false;\n        state.options = action.payload.filter(\n          ({ lat, lon }, i, arr) =>\n            arr.findIndex((d) => d.lat === lat) === i &&\n            arr.findIndex((d) => d.lon === lon) === i\n        );\n      });\n  },\n});\n\nexport const { incrementByAmount } = weatherSlice.actions;\n\nexport default weatherSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}