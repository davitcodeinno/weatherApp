{"ast":null,"code":"var _jsxFileName = \"/home/davit/Documents/work/weather/src/components/main/Today.js\",\n    _s = $RefreshSig$();\n\nimport { Avatar, CardContent, Grid } from \"@mui/material\";\nimport React, { useEffect, useMemo } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport { WEATHER_SHORT_DATA_OBJECTS } from \"../../constants/app\";\nimport { selectSearchValue } from \"../../redux/locationSearch/locationSearchSlice\";\nimport { getWeatherData, selectWeatherForecastData } from \"../../redux/weather/weatherSlice\";\nimport LabelAndValue from \"../shared/LabelAndValue\";\nimport WeatherCard from \"../shared/WeatherCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Today = () => {\n  _s();\n\n  const searchValue = useSelector(selectSearchValue);\n  const {\n    forecastday\n  } = useSelector(selectWeatherForecastData) || [];\n  const hours = useMemo(() => (forecastday.find(d => new Date(d.date).getDate() === new Date().getDate()) || {}).hour || [], [forecastday]);\n  console.log(hours);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (searchValue) {\n      dispatch(getWeatherData(searchValue));\n    }\n  }, [searchValue, dispatch]);\n  return /*#__PURE__*/_jsxDEV(WeatherCard, {\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: {\n          xs: 1,\n          md: 2\n        },\n        columns: {\n          xs: 12,\n          sm: 24\n        },\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: hours.map(h => {\n            const {\n              condition: {\n                text,\n                icon\n              } = {}\n            } = h;\n            return WEATHER_SHORT_DATA_OBJECTS.map(({\n              key,\n              label,\n              additionalValue,\n              valueRenderer\n            }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 2,\n                sm: 4,\n                md: 4,\n                children: [/*#__PURE__*/_jsxDEV(LabelAndValue, {\n                  label: text,\n                  value: /*#__PURE__*/_jsxDEV(Avatar, {\n                    sx: {\n                      width: 64,\n                      height: 64\n                    },\n                    variant: \"square\",\n                    src: `https:${icon}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 49,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 46,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(LabelAndValue, {\n                  label: label,\n                  additionalValue: additionalValue,\n                  value: valueRenderer ? valueRenderer(h[key]) : h[key]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 56,\n                  columnNumber: 23\n                }, this)]\n              }, key, true, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 21\n              }, this)\n            }, void 0, false));\n          })\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Today, \"oazyY3juX0R3C4ZBDhepSM/EIv8=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = Today;\nexport default Today;\n\nvar _c;\n\n$RefreshReg$(_c, \"Today\");","map":{"version":3,"sources":["/home/davit/Documents/work/weather/src/components/main/Today.js"],"names":["Avatar","CardContent","Grid","React","useEffect","useMemo","useDispatch","useSelector","WEATHER_SHORT_DATA_OBJECTS","selectSearchValue","getWeatherData","selectWeatherForecastData","LabelAndValue","WeatherCard","Today","searchValue","forecastday","hours","find","d","Date","date","getDate","hour","console","log","dispatch","xs","md","sm","map","h","condition","text","icon","key","label","additionalValue","valueRenderer","width","height"],"mappings":"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","sourcesContent":["import { Avatar, CardContent, Grid } from \"@mui/material\";\nimport React, { useEffect, useMemo } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport { WEATHER_SHORT_DATA_OBJECTS } from \"../../constants/app\";\nimport { selectSearchValue } from \"../../redux/locationSearch/locationSearchSlice\";\nimport {\n  getWeatherData,\n  selectWeatherForecastData,\n} from \"../../redux/weather/weatherSlice\";\nimport LabelAndValue from \"../shared/LabelAndValue\";\nimport WeatherCard from \"../shared/WeatherCard\";\n\nconst Today = () => {\n  const searchValue = useSelector(selectSearchValue);\n  const { forecastday } = useSelector(selectWeatherForecastData) || [];\n  const hours = useMemo(\n    () =>\n      (\n        forecastday.find(\n          (d) => new Date(d.date).getDate() === new Date().getDate()\n        ) || {}\n      ).hour || [],\n    [forecastday]\n  );\n  console.log(hours);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (searchValue) {\n      dispatch(getWeatherData(searchValue));\n    }\n  }, [searchValue, dispatch]);\n\n  return (\n    <WeatherCard>\n      <CardContent>\n        <Grid container spacing={{ xs: 1, md: 2 }} columns={{ xs: 12, sm: 24 }}>\n          <>\n            {hours.map((h) => {\n              const { condition: { text, icon } = {} } = h;\n              return WEATHER_SHORT_DATA_OBJECTS.map(\n                ({ key, label, additionalValue, valueRenderer }) => (\n                  <>\n                    <Grid item xs={2} sm={4} md={4} key={key}>\n                      <LabelAndValue\n                        label={text}\n                        value={\n                          <Avatar\n                            sx={{ width: 64, height: 64 }}\n                            variant=\"square\"\n                            src={`https:${icon}`}\n                          />\n                        }\n                      />\n                      <LabelAndValue\n                        label={label}\n                        additionalValue={additionalValue}\n                        value={valueRenderer ? valueRenderer(h[key]) : h[key]}\n                      />\n                    </Grid>\n                  </>\n                )\n              );\n            })}\n          </>\n        </Grid>\n      </CardContent>\n    </WeatherCard>\n  );\n};\n\nexport default Today;\n"]},"metadata":{},"sourceType":"module"}