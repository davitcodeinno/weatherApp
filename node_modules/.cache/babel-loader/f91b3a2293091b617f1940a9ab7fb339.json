{"ast":null,"code":"var _jsxFileName = \"/home/davit/Documents/work/weather/src/components/main/Now.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectSearchValue } from \"../../redux/locationSearch/locationSearchSlice\";\nimport { getCurrentWeather, getWeatherData, selectWeatherCurrentData, selectWeatherData } from \"../../redux/weather/weatherSlice\";\nimport Box from \"@mui/material/Box\";\nimport CardActions from \"@mui/material/CardActions\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport WeatherCard from \"../shared/WeatherCard\";\nimport Avatar from \"@mui/material/Avatar\";\nimport LabelAndValue from \"../shared/LabelAndValue\";\nimport { getWindDirectionText } from \"../../helpers/app\";\nimport Grid from \"@mui/material/Grid\";\nimport { WEATHER_DATA_KEYS } from \"../../constants/app\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Now = () => {\n  _s();\n\n  const searchValue = useSelector(selectSearchValue);\n  const dispatch = useDispatch();\n  const weatherData = useSelector(selectWeatherCurrentData) || {};\n  const {\n    condition: {\n      text,\n      icon\n    } = {}\n  } = weatherData;\n  useEffect(() => {\n    if (searchValue) {\n      dispatch(getWeatherData(searchValue));\n    }\n  }, [searchValue, dispatch]);\n  return /*#__PURE__*/_jsxDEV(WeatherCard, {\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: {\n          xs: 2,\n          md: 3\n        },\n        columns: {\n          xs: 4,\n          sm: 8,\n          md: 12\n        },\n        children: Array.from(Array(6)).map((_, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 2,\n            sm: 4,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(LabelAndValue, {\n              label: text,\n              value: /*#__PURE__*/_jsxDEV(Avatar, {\n                sx: {\n                  width: 64,\n                  height: 64\n                },\n                variant: \"square\",\n                src: `https:${icon}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }, this), WEATHER_DATA_KEYS.map(({\n            key,\n            label,\n            additionalValue\n          }) => /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 2,\n            sm: 4,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(LabelAndValue, {\n              label: label,\n              additionalValue: additionalValue\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 19\n            }, this)\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LabelAndValue, {\n        label: \"\",\n        value: temp_c,\n        additionalValue: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LabelAndValue, {\n        label: \"\",\n        value: feelslike_c,\n        additionalValue: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LabelAndValue, {\n        label: \"\",\n        value: pressure_mb,\n        additionalValue: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LabelAndValue, {\n        label: \"\",\n        value: humidity,\n        additionalValue: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LabelAndValue, {\n        label: \"\",\n        value: wind_kph,\n        additionalValue: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LabelAndValue, {\n        label: \"\",\n        value: getWindDirectionText(wind_dir)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LabelAndValue, {\n        label: \"\",\n        value: cloud\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LabelAndValue, {\n        label: \"\",\n        value: vis_km,\n        additionalValue: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Now, \"w6n0wb1cYzpia7iG4KCRqHw/ekY=\", false, function () {\n  return [useSelector, useDispatch, useSelector];\n});\n\n_c = Now;\nexport default Now;\n\nvar _c;\n\n$RefreshReg$(_c, \"Now\");","map":{"version":3,"sources":["/home/davit/Documents/work/weather/src/components/main/Now.js"],"names":["React","useEffect","useMemo","useDispatch","useSelector","selectSearchValue","getCurrentWeather","getWeatherData","selectWeatherCurrentData","selectWeatherData","Box","CardActions","CardContent","Button","Typography","WeatherCard","Avatar","LabelAndValue","getWindDirectionText","Grid","WEATHER_DATA_KEYS","Now","searchValue","dispatch","weatherData","condition","text","icon","xs","md","sm","Array","from","map","_","index","width","height","key","label","additionalValue","temp_c","feelslike_c","pressure_mb","humidity","wind_kph","wind_dir","cloud","vis_km"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectSearchValue } from \"../../redux/locationSearch/locationSearchSlice\";\nimport {\n  getCurrentWeather,\n  getWeatherData,\n  selectWeatherCurrentData,\n  selectWeatherData,\n} from \"../../redux/weather/weatherSlice\";\nimport Box from \"@mui/material/Box\";\nimport CardActions from \"@mui/material/CardActions\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport WeatherCard from \"../shared/WeatherCard\";\nimport Avatar from \"@mui/material/Avatar\";\nimport LabelAndValue from \"../shared/LabelAndValue\";\nimport { getWindDirectionText } from \"../../helpers/app\";\nimport Grid from \"@mui/material/Grid\";\nimport { WEATHER_DATA_KEYS } from \"../../constants/app\";\n\nconst Now = () => {\n  const searchValue = useSelector(selectSearchValue);\n  const dispatch = useDispatch();\n  const weatherData = useSelector(selectWeatherCurrentData) || {};\n  const { condition: { text, icon } = {} } = weatherData;\n\n  useEffect(() => {\n    if (searchValue) {\n      dispatch(getWeatherData(searchValue));\n    }\n  }, [searchValue, dispatch]);\n\n  return (\n    <WeatherCard>\n      <CardContent>\n        <Grid\n          container\n          spacing={{ xs: 2, md: 3 }}\n          columns={{ xs: 4, sm: 8, md: 12 }}\n        >\n          {Array.from(Array(6)).map((_, index) => (\n            <>\n              <Grid item xs={2} sm={4} md={4} key={index}>\n                <LabelAndValue\n                  label={text}\n                  value={\n                    <Avatar\n                      sx={{ width: 64, height: 64 }}\n                      variant=\"square\"\n                      src={`https:${icon}`}\n                    />\n                  }\n                />\n              </Grid>\n              {WEATHER_DATA_KEYS.map(({ key, label, additionalValue }) => (\n                <Grid item xs={2} sm={4} md={4} key={key}>\n                  <LabelAndValue\n                    label={label}\n                    additionalValue={additionalValue}\n                  />\n                </Grid>\n              ))}\n            </>\n          ))}\n        </Grid>\n\n        <LabelAndValue label=\"\" value={temp_c} additionalValue=\"\" />\n        <LabelAndValue label=\"\" value={feelslike_c} additionalValue=\"\" />\n        <LabelAndValue label=\"\" value={pressure_mb} additionalValue=\"\" />\n        <LabelAndValue label=\"\" value={humidity} additionalValue=\"\" />\n        <LabelAndValue label=\"\" value={wind_kph} additionalValue=\"\" />\n        <LabelAndValue label=\"\" value={getWindDirectionText(wind_dir)} />\n        <LabelAndValue label=\"\" value={cloud} />\n        <LabelAndValue label=\"\" value={vis_km} additionalValue=\"\" />\n      </CardContent>\n    </WeatherCard>\n  );\n};\n\nexport default Now;\n"]},"metadata":{},"sourceType":"module"}