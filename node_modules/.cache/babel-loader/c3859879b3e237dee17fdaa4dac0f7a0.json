{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport weatherApi from \"../../api/weather\";\nimport { initialState } from \"../initialState\";\nexport const getCurrentWeather = createAsyncThunk(\"weather/getCurrentWeather\", async searchValue => {\n  const response = await weatherApi.getCurrentWeather(searchValue); // The value we return becomes the `fulfilled` action payload\n\n  return response.data;\n});\nexport const getForecastWeather = createAsyncThunk(\"weather/getForecastWeather\", async searchValue => {\n  const response = await weatherApi.getForecastWeather(searchValue); // The value we return becomes the `fulfilled` action payload\n\n  return response.data;\n});\nexport const weatherSlice = createSlice({\n  name: \"weather\",\n  initialState: initialState.weather,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getCurrentWeather.pending, state => {\n      state.loading = true;\n    }).addCase(getCurrentWeather.fulfilled, (state, action) => {\n      state.loading = false;\n      state.data = action.payload;\n    }).addCase(getForecastWeather.pending, state => {\n      state.loading = true;\n    }).addCase(getForecastWeather.fulfilled, (state, action) => {\n      state.loading = false;\n      state.forecastData = action.payload;\n    });\n  }\n});\nexport const {\n  incrementByAmount\n} = weatherSlice.actions;\nexport const selectWeatherData = state => state.weather.data;\nexport default weatherSlice.reducer;","map":{"version":3,"sources":["/home/davit/Documents/work/weather/src/redux/weather/weatherSlice.js"],"names":["createAsyncThunk","createSlice","weatherApi","initialState","getCurrentWeather","searchValue","response","data","getForecastWeather","weatherSlice","name","weather","reducers","extraReducers","builder","addCase","pending","state","loading","fulfilled","action","payload","forecastData","incrementByAmount","actions","selectWeatherData","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAEA,OAAO,MAAMC,iBAAiB,GAAGJ,gBAAgB,CAC/C,2BAD+C,EAE/C,MAAOK,WAAP,IAAuB;AACrB,QAAMC,QAAQ,GAAG,MAAMJ,UAAU,CAACE,iBAAX,CAA6BC,WAA7B,CAAvB,CADqB,CAErB;;AACA,SAAOC,QAAQ,CAACC,IAAhB;AACD,CAN8C,CAA1C;AASP,OAAO,MAAMC,kBAAkB,GAAGR,gBAAgB,CAChD,4BADgD,EAEhD,MAAOK,WAAP,IAAuB;AACrB,QAAMC,QAAQ,GAAG,MAAMJ,UAAU,CAACM,kBAAX,CAA8BH,WAA9B,CAAvB,CADqB,CAErB;;AACA,SAAOC,QAAQ,CAACC,IAAhB;AACD,CAN+C,CAA3C;AASP,OAAO,MAAME,YAAY,GAAGR,WAAW,CAAC;AACtCS,EAAAA,IAAI,EAAE,SADgC;AAEtCP,EAAAA,YAAY,EAAEA,YAAY,CAACQ,OAFW;AAGtCC,EAAAA,QAAQ,EAAE,EAH4B;AAItCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWX,iBAAiB,CAACY,OAD7B,EACuCC,KAAD,IAAW;AAC7CA,MAAAA,KAAK,CAACC,OAAN,GAAgB,IAAhB;AACD,KAHH,EAIGH,OAJH,CAIWX,iBAAiB,CAACe,SAJ7B,EAIwC,CAACF,KAAD,EAAQG,MAAR,KAAmB;AACvDH,MAAAA,KAAK,CAACC,OAAN,GAAgB,KAAhB;AACAD,MAAAA,KAAK,CAACV,IAAN,GAAaa,MAAM,CAACC,OAApB;AACD,KAPH,EAQGN,OARH,CAQWP,kBAAkB,CAACQ,OAR9B,EAQwCC,KAAD,IAAW;AAC9CA,MAAAA,KAAK,CAACC,OAAN,GAAgB,IAAhB;AACD,KAVH,EAWGH,OAXH,CAWWP,kBAAkB,CAACW,SAX9B,EAWyC,CAACF,KAAD,EAAQG,MAAR,KAAmB;AACxDH,MAAAA,KAAK,CAACC,OAAN,GAAgB,KAAhB;AACAD,MAAAA,KAAK,CAACK,YAAN,GAAqBF,MAAM,CAACC,OAA5B;AACD,KAdH;AAeD;AApBqC,CAAD,CAAhC;AAuBP,OAAO,MAAM;AAAEE,EAAAA;AAAF,IAAwBd,YAAY,CAACe,OAA3C;AAEP,OAAO,MAAMC,iBAAiB,GAAIR,KAAD,IAAWA,KAAK,CAACN,OAAN,CAAcJ,IAAnD;AAEP,eAAeE,YAAY,CAACiB,OAA5B","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport weatherApi from \"../../api/weather\";\nimport { initialState } from \"../initialState\";\n\nexport const getCurrentWeather = createAsyncThunk(\n  \"weather/getCurrentWeather\",\n  async (searchValue) => {\n    const response = await weatherApi.getCurrentWeather(searchValue);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const getForecastWeather = createAsyncThunk(\n  \"weather/getForecastWeather\",\n  async (searchValue) => {\n    const response = await weatherApi.getForecastWeather(searchValue);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const weatherSlice = createSlice({\n  name: \"weather\",\n  initialState: initialState.weather,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(getCurrentWeather.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(getCurrentWeather.fulfilled, (state, action) => {\n        state.loading = false;\n        state.data = action.payload;\n      })\n      .addCase(getForecastWeather.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(getForecastWeather.fulfilled, (state, action) => {\n        state.loading = false;\n        state.forecastData = action.payload;\n      });\n  },\n});\n\nexport const { incrementByAmount } = weatherSlice.actions;\n\nexport const selectWeatherData = (state) => state.weather.data;\n\nexport default weatherSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}