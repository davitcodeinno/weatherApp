{"ast":null,"code":"var _jsxFileName = \"/home/davit/Documents/work/weather/src/components/main/Now.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectSearchValue } from \"../../redux/locationSearch/locationSearchSlice\";\nimport { getWeatherData, selectWeatherCurrentData } from \"../../redux/weather/weatherSlice\";\nimport CardContent from \"@mui/material/CardContent\";\nimport WeatherCard from \"../shared/WeatherCard\";\nimport Avatar from \"@mui/material/Avatar\";\nimport LabelAndValue from \"../shared/LabelAndValue\";\nimport Grid from \"@mui/material/Grid\";\nimport { WEATHER_DATA_KEYS } from \"../../constants/app\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Now = () => {\n  _s();\n\n  const searchValue = useSelector(selectSearchValue);\n  const dispatch = useDispatch();\n  const weatherData = useSelector(selectWeatherCurrentData) || {};\n  const {\n    condition: {\n      text,\n      icon\n    } = {}\n  } = weatherData;\n  useEffect(() => {\n    if (searchValue === null || searchValue === void 0 ? void 0 : searchValue.name) {\n      dispatch(getWeatherData(searchValue));\n    }\n  }, [searchValue, dispatch]);\n  return /*#__PURE__*/_jsxDEV(WeatherCard, {\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: {\n          xs: 2,\n          md: 3\n        },\n        columns: {\n          xs: 4,\n          sm: 8,\n          md: 12\n        },\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 2,\n            sm: 4,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(LabelAndValue, {\n              label: text,\n              value: /*#__PURE__*/_jsxDEV(Avatar, {\n                sx: {\n                  width: 64,\n                  height: 64\n                },\n                variant: \"square\",\n                src: `https:${icon}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 40,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this), WEATHER_DATA_KEYS.map(({\n            key,\n            label,\n            additionalValue,\n            valueRenderer\n          }) => /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 2,\n            sm: 4,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(LabelAndValue, {\n              label: label,\n              additionalValue: additionalValue,\n              value: valueRenderer ? valueRenderer(weatherData[key]) : weatherData[key]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 19\n            }, this)\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Now, \"w6n0wb1cYzpia7iG4KCRqHw/ekY=\", false, function () {\n  return [useSelector, useDispatch, useSelector];\n});\n\n_c = Now;\nexport default Now;\n\nvar _c;\n\n$RefreshReg$(_c, \"Now\");","map":{"version":3,"sources":["/home/davit/Documents/work/weather/src/components/main/Now.js"],"names":["React","useEffect","useDispatch","useSelector","selectSearchValue","getWeatherData","selectWeatherCurrentData","CardContent","WeatherCard","Avatar","LabelAndValue","Grid","WEATHER_DATA_KEYS","Now","searchValue","dispatch","weatherData","condition","text","icon","name","xs","md","sm","width","height","map","key","label","additionalValue","valueRenderer"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectSearchValue } from \"../../redux/locationSearch/locationSearchSlice\";\nimport {\n  getWeatherData,\n  selectWeatherCurrentData,\n} from \"../../redux/weather/weatherSlice\";\nimport CardContent from \"@mui/material/CardContent\";\nimport WeatherCard from \"../shared/WeatherCard\";\nimport Avatar from \"@mui/material/Avatar\";\nimport LabelAndValue from \"../shared/LabelAndValue\";\nimport Grid from \"@mui/material/Grid\";\nimport { WEATHER_DATA_KEYS } from \"../../constants/app\";\n\nconst Now = () => {\n  const searchValue = useSelector(selectSearchValue);\n  const dispatch = useDispatch();\n  const weatherData = useSelector(selectWeatherCurrentData) || {};\n  const { condition: { text, icon } = {} } = weatherData;\n\n  useEffect(() => {\n    if (searchValue?.name) {\n      dispatch(getWeatherData(searchValue));\n    }\n  }, [searchValue, dispatch]);\n\n  return (\n    <WeatherCard>\n      <CardContent>\n        <Grid\n          container\n          spacing={{ xs: 2, md: 3 }}\n          columns={{ xs: 4, sm: 8, md: 12 }}\n        >\n          <>\n            <Grid item xs={2} sm={4} md={4}>\n              <LabelAndValue\n                label={text}\n                value={\n                  <Avatar\n                    sx={{ width: 64, height: 64 }}\n                    variant=\"square\"\n                    src={`https:${icon}`}\n                  />\n                }\n              />\n            </Grid>\n            {WEATHER_DATA_KEYS.map(\n              ({ key, label, additionalValue, valueRenderer }) => (\n                <Grid item xs={2} sm={4} md={4} key={key}>\n                  <LabelAndValue\n                    label={label}\n                    additionalValue={additionalValue}\n                    value={\n                      valueRenderer\n                        ? valueRenderer(weatherData[key])\n                        : weatherData[key]\n                    }\n                  />\n                </Grid>\n              )\n            )}\n          </>\n        </Grid>\n      </CardContent>\n    </WeatherCard>\n  );\n};\n\nexport default Now;\n"]},"metadata":{},"sourceType":"module"}