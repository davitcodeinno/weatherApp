{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\"; // import { fetchCount } from \"./counterAPI\";\n\nconst initialState = {}; // export const incrementAsync = createAsyncThunk(\n//   \"counter/fetchCount\",\n//   async (amount) => {\n//     const response = await fetchCount(amount);\n//     // The value we return becomes the `fulfilled` action payload\n//     return response.data;\n//   }\n// );\n\nexport const weatherSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  } // extraReducers: (builder) => {\n  //   builder\n  //     .addCase(incrementAsync.pending, (state) => {\n  //       state.status = \"loading\";\n  //     })\n  //     .addCase(incrementAsync.fulfilled, (state, action) => {\n  //       state.status = \"idle\";\n  //       state.value += action.payload;\n  //     });\n  // },\n\n});\nexport const {\n  incrementByAmount\n} = weatherSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const selectCount = state => state.counter.value; // We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\nexport default weatherSlice.reducer;","map":{"version":3,"sources":["/home/davit/Documents/work/weather/src/redux/weather/weatherSlice.js"],"names":["createAsyncThunk","createSlice","initialState","weatherSlice","name","reducers","incrementByAmount","state","action","value","payload","actions","selectCount","counter","incrementIfOdd","amount","dispatch","getState","currentValue","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C,C,CACA;;AAEA,MAAMC,YAAY,GAAG,EAArB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAGF,WAAW,CAAC;AACtCG,EAAAA,IAAI,EAAE,SADgC;AAEtCF,EAAAA,YAFsC;AAGtCG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,iBAAiB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpCD,MAAAA,KAAK,CAACE,KAAN,IAAeD,MAAM,CAACE,OAAtB;AACD;AAHO,GAH4B,CAStC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAlBsC,CAAD,CAAhC;AAqBP,OAAO,MAAM;AAAEJ,EAAAA;AAAF,IAAwBH,YAAY,CAACQ,OAA3C,C,CAEP;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAIL,KAAD,IAAWA,KAAK,CAACM,OAAN,CAAcJ,KAA7C,C,CAEP;AACA;;AACA,OAAO,MAAMK,cAAc,GAAIC,MAAD,IAAY,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAChE,QAAMC,YAAY,GAAGN,WAAW,CAACK,QAAQ,EAAT,CAAhC;;AACA,MAAIC,YAAY,GAAG,CAAf,KAAqB,CAAzB,EAA4B;AAC1BF,IAAAA,QAAQ,CAACV,iBAAiB,CAACS,MAAD,CAAlB,CAAR;AACD;AACF,CALM;AAOP,eAAeZ,YAAY,CAACgB,OAA5B","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n// import { fetchCount } from \"./counterAPI\";\n\nconst initialState = {};\n\n// export const incrementAsync = createAsyncThunk(\n//   \"counter/fetchCount\",\n//   async (amount) => {\n//     const response = await fetchCount(amount);\n//     // The value we return becomes the `fulfilled` action payload\n//     return response.data;\n//   }\n// );\n\nexport const weatherSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n\n  // extraReducers: (builder) => {\n  //   builder\n  //     .addCase(incrementAsync.pending, (state) => {\n  //       state.status = \"loading\";\n  //     })\n  //     .addCase(incrementAsync.fulfilled, (state, action) => {\n  //       state.status = \"idle\";\n  //       state.value += action.payload;\n  //     });\n  // },\n});\n\nexport const { incrementByAmount } = weatherSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default weatherSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}