{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport weatherApi from \"../../api/weather\";\nimport { initialState } from \"../initialState\";\nexport const getWeather = createAsyncThunk(\"weather/getWeather\", async searchValue => {\n  const response = await weatherApi.getWeather(searchValue); // The value we return becomes the `fulfilled` action payload\n\n  return response.data;\n});\nexport const weatherSlice = createSlice({\n  name: \"weather\",\n  initialState: initialState.weather,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getWeather.pending, state => {\n      state.loading = true;\n    }).addCase(getWeather.fulfilled, (state, action) => {\n      state.loading = false;\n      state.data = action.payload;\n    });\n  }\n});\nexport const {\n  incrementByAmount\n} = weatherSlice.actions;\nexport const selectWeatherData = state => {\n  var _state$weather$data;\n\n  return (_state$weather$data = state.weather.data) === null || _state$weather$data === void 0 ? void 0 : _state$weather$data.current;\n};\nexport default weatherSlice.reducer;","map":{"version":3,"sources":["/home/davit/Documents/work/weather/src/redux/weather/weatherSlice.js"],"names":["createAsyncThunk","createSlice","weatherApi","initialState","getWeather","searchValue","response","data","weatherSlice","name","weather","reducers","extraReducers","builder","addCase","pending","state","loading","fulfilled","action","payload","incrementByAmount","actions","selectWeatherData","current","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAEA,OAAO,MAAMC,UAAU,GAAGJ,gBAAgB,CACxC,oBADwC,EAExC,MAAOK,WAAP,IAAuB;AACrB,QAAMC,QAAQ,GAAG,MAAMJ,UAAU,CAACE,UAAX,CAAsBC,WAAtB,CAAvB,CADqB,CAErB;;AACA,SAAOC,QAAQ,CAACC,IAAhB;AACD,CANuC,CAAnC;AASP,OAAO,MAAMC,YAAY,GAAGP,WAAW,CAAC;AACtCQ,EAAAA,IAAI,EAAE,SADgC;AAEtCN,EAAAA,YAAY,EAAEA,YAAY,CAACO,OAFW;AAGtCC,EAAAA,QAAQ,EAAE,EAH4B;AAItCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWV,UAAU,CAACW,OADtB,EACgCC,KAAD,IAAW;AACtCA,MAAAA,KAAK,CAACC,OAAN,GAAgB,IAAhB;AACD,KAHH,EAIGH,OAJH,CAIWV,UAAU,CAACc,SAJtB,EAIiC,CAACF,KAAD,EAAQG,MAAR,KAAmB;AAChDH,MAAAA,KAAK,CAACC,OAAN,GAAgB,KAAhB;AACAD,MAAAA,KAAK,CAACT,IAAN,GAAaY,MAAM,CAACC,OAApB;AACD,KAPH;AAQD;AAbqC,CAAD,CAAhC;AAgBP,OAAO,MAAM;AAAEC,EAAAA;AAAF,IAAwBb,YAAY,CAACc,OAA3C;AAEP,OAAO,MAAMC,iBAAiB,GAAIP,KAAD;AAAA;;AAAA,gCAAWA,KAAK,CAACN,OAAN,CAAcH,IAAzB,wDAAW,oBAAoBiB,OAA/B;AAAA,CAA1B;AAEP,eAAehB,YAAY,CAACiB,OAA5B","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport weatherApi from \"../../api/weather\";\nimport { initialState } from \"../initialState\";\n\nexport const getWeather = createAsyncThunk(\n  \"weather/getWeather\",\n  async (searchValue) => {\n    const response = await weatherApi.getWeather(searchValue);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const weatherSlice = createSlice({\n  name: \"weather\",\n  initialState: initialState.weather,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(getWeather.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(getWeather.fulfilled, (state, action) => {\n        state.loading = false;\n        state.data = action.payload;\n      });\n  },\n});\n\nexport const { incrementByAmount } = weatherSlice.actions;\n\nexport const selectWeatherData = (state) => state.weather.data?.current;\n\nexport default weatherSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}