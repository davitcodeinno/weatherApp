{"ast":null,"code":"var _jsxFileName = \"/home/davit/Documents/work/weather/src/components/main/Today.js\",\n    _s = $RefreshSig$();\n\nimport { Avatar, CardContent, Grid, Paper, Typography } from \"@mui/material\";\nimport React, { useEffect, useMemo } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport { WEATHER_SHORT_DATA_OBJECTS } from \"../../constants/app\";\nimport { selectSearchValue } from \"../../redux/locationSearch/locationSearchSlice\";\nimport { getWeatherData, selectWeatherForecastData } from \"../../redux/weather/weatherSlice\";\nimport WeatherCard from \"../shared/WeatherCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Today = () => {\n  _s();\n\n  const searchValue = useSelector(selectSearchValue);\n  const {\n    forecastday\n  } = useSelector(selectWeatherForecastData) || [];\n  const hours = useMemo(() => (forecastday.find(d => new Date(d.date).getDate() === new Date().getDate()) || {}).hour || [], [forecastday]);\n  console.log(hours);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (searchValue) {\n      dispatch(getWeatherData(searchValue));\n    }\n  }, [searchValue, dispatch]);\n  return /*#__PURE__*/_jsxDEV(WeatherCard, {\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: {\n          xs: 1,\n          md: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: hours.map(h => {\n            var _time$split;\n\n            const {\n              condition: {\n                text,\n                icon\n              } = {},\n              time,\n              temp_c\n            } = h;\n            return /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 2,\n              sm: 1,\n              children: /*#__PURE__*/_jsxDEV(Paper, {\n                sx: {\n                  textAlign: \"center\",\n                  height: 130\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body1\",\n                  children: (_time$split = time.split(\" \")) === null || _time$split === void 0 ? void 0 : _time$split[1]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 44,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Avatar, {\n                  sx: {\n                    width: 32,\n                    height: 32\n                  },\n                  variant: \"square\",\n                  src: `https:${icon}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 47,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  children: text\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 52,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  children: [temp_c, \"\\u2103\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 53,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 19\n              }, this)\n            }, time, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Today, \"oazyY3juX0R3C4ZBDhepSM/EIv8=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = Today;\nexport default Today;\n\nvar _c;\n\n$RefreshReg$(_c, \"Today\");","map":{"version":3,"sources":["/home/davit/Documents/work/weather/src/components/main/Today.js"],"names":["Avatar","CardContent","Grid","Paper","Typography","React","useEffect","useMemo","useDispatch","useSelector","WEATHER_SHORT_DATA_OBJECTS","selectSearchValue","getWeatherData","selectWeatherForecastData","WeatherCard","Today","searchValue","forecastday","hours","find","d","Date","date","getDate","hour","console","log","dispatch","xs","md","map","h","condition","text","icon","time","temp_c","textAlign","height","split","width"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,WAAjB,EAA8BC,IAA9B,EAAoCC,KAApC,EAA2CC,UAA3C,QAA6D,eAA7D;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,QAA0C,OAA1C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,0BAAT,QAA2C,qBAA3C;AACA,SAASC,iBAAT,QAAkC,gDAAlC;AACA,SACEC,cADF,EAEEC,yBAFF,QAGO,kCAHP;AAIA,OAAOC,WAAP,MAAwB,uBAAxB;;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAMC,WAAW,GAAGP,WAAW,CAACE,iBAAD,CAA/B;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAkBR,WAAW,CAACI,yBAAD,CAAX,IAA0C,EAAlE;AACA,QAAMK,KAAK,GAAGX,OAAO,CACnB,MACE,CACEU,WAAW,CAACE,IAAZ,CACGC,CAAD,IAAO,IAAIC,IAAJ,CAASD,CAAC,CAACE,IAAX,EAAiBC,OAAjB,OAA+B,IAAIF,IAAJ,GAAWE,OAAX,EADxC,KAEK,EAHP,EAIEC,IAJF,IAIU,EANO,EAOnB,CAACP,WAAD,CAPmB,CAArB;AASAQ,EAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AACA,QAAMS,QAAQ,GAAGnB,WAAW,EAA5B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,WAAJ,EAAiB;AACfW,MAAAA,QAAQ,CAACf,cAAc,CAACI,WAAD,CAAf,CAAR;AACD;AACF,GAJQ,EAIN,CAACA,WAAD,EAAcW,QAAd,CAJM,CAAT;AAMA,sBACE,QAAC,WAAD;AAAA,2BACE,QAAC,WAAD;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,OAAO,EAAE;AAAEC,UAAAA,EAAE,EAAE,CAAN;AAASC,UAAAA,EAAE,EAAE;AAAb,SAAzB;AAAA,+BACE;AAAA,oBACGX,KAAK,CAACY,GAAN,CAAWC,CAAD,IAAO;AAAA;;AAChB,kBAAM;AAAEC,cAAAA,SAAS,EAAE;AAAEC,gBAAAA,IAAF;AAAQC,gBAAAA;AAAR,kBAAiB,EAA9B;AAAkCC,cAAAA,IAAlC;AAAwCC,cAAAA;AAAxC,gBAAmDL,CAAzD;AACA,gCACE,QAAC,IAAD;AAAM,cAAA,IAAI,MAAV;AAAW,cAAA,EAAE,EAAE,CAAf;AAAkB,cAAA,EAAE,EAAE,CAAtB;AAAA,qCACE,QAAC,KAAD;AAAO,gBAAA,EAAE,EAAE;AAAEM,kBAAAA,SAAS,EAAE,QAAb;AAAuBC,kBAAAA,MAAM,EAAE;AAA/B,iBAAX;AAAA,wCACE,QAAC,UAAD;AAAY,kBAAA,OAAO,EAAC,OAApB;AAAA,2CACGH,IAAI,CAACI,KAAL,CAAW,GAAX,CADH,gDACG,YAAkB,CAAlB;AADH;AAAA;AAAA;AAAA;AAAA,wBADF,eAIE,QAAC,MAAD;AACE,kBAAA,EAAE,EAAE;AAAEC,oBAAAA,KAAK,EAAE,EAAT;AAAaF,oBAAAA,MAAM,EAAE;AAArB,mBADN;AAEE,kBAAA,OAAO,EAAC,QAFV;AAGE,kBAAA,GAAG,EAAG,SAAQJ,IAAK;AAHrB;AAAA;AAAA;AAAA;AAAA,wBAJF,eASE,QAAC,UAAD;AAAY,kBAAA,OAAO,EAAC,OAApB;AAAA,4BAA6BD;AAA7B;AAAA;AAAA;AAAA;AAAA,wBATF,eAUE,QAAC,UAAD;AAAY,kBAAA,OAAO,EAAC,OAApB;AAAA,6BAA6BG,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,wBAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,eAA8BD,IAA9B;AAAA;AAAA;AAAA;AAAA,oBADF;AAgBD,WAlBA;AADH;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD,CAlDD;;GAAMpB,K;UACgBN,W,EACIA,W,EAWPD,W;;;KAbbO,K;AAoDN,eAAeA,KAAf","sourcesContent":["import { Avatar, CardContent, Grid, Paper, Typography } from \"@mui/material\";\nimport React, { useEffect, useMemo } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport { WEATHER_SHORT_DATA_OBJECTS } from \"../../constants/app\";\nimport { selectSearchValue } from \"../../redux/locationSearch/locationSearchSlice\";\nimport {\n  getWeatherData,\n  selectWeatherForecastData,\n} from \"../../redux/weather/weatherSlice\";\nimport WeatherCard from \"../shared/WeatherCard\";\n\nconst Today = () => {\n  const searchValue = useSelector(selectSearchValue);\n  const { forecastday } = useSelector(selectWeatherForecastData) || [];\n  const hours = useMemo(\n    () =>\n      (\n        forecastday.find(\n          (d) => new Date(d.date).getDate() === new Date().getDate()\n        ) || {}\n      ).hour || [],\n    [forecastday]\n  );\n  console.log(hours);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (searchValue) {\n      dispatch(getWeatherData(searchValue));\n    }\n  }, [searchValue, dispatch]);\n\n  return (\n    <WeatherCard>\n      <CardContent>\n        <Grid container spacing={{ xs: 1, md: 1 }}>\n          <>\n            {hours.map((h) => {\n              const { condition: { text, icon } = {}, time, temp_c } = h;\n              return (\n                <Grid item xs={2} sm={1} key={time}>\n                  <Paper sx={{ textAlign: \"center\", height: 130 }}>\n                    <Typography variant=\"body1\">\n                      {time.split(\" \")?.[1]}\n                    </Typography>\n                    <Avatar\n                      sx={{ width: 32, height: 32 }}\n                      variant=\"square\"\n                      src={`https:${icon}`}\n                    />\n                    <Typography variant=\"body2\">{text}</Typography>\n                    <Typography variant=\"body2\">{temp_c}â„ƒ</Typography>\n                  </Paper>\n                </Grid>\n              );\n            })}\n          </>\n        </Grid>\n      </CardContent>\n    </WeatherCard>\n  );\n};\n\nexport default Today;\n"]},"metadata":{},"sourceType":"module"}